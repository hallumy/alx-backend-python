pipeline {
    agent any

    environment {
        // Your GitHub credentials ID from Jenkins credentials
        GIT_CREDENTIALS_ID = 'github-creds'
        // Your repository URL
        REPO_URL = 'https://github.com/hallumy/alx-backend-python.git'
        // Branch to build
        BRANCH = 'main'
        // Directory for Python virtual environment
        VENV_DIR = '.venv'
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'Cloning repository from GitHub...'
                git branch: "${BRANCH}", credentialsId: "${GIT_CREDENTIALS_ID}", url: "${REPO_URL}"
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Creating virtual environment and installing dependencies...'
                sh '''
                    python3 -m venv ${VENV_DIR}
                    source ${VENV_DIR}/bin/activate
                    pip3 install --upgrade pip
                    pip3 install -r /messaging_app/requirements.txt
                '''
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running tests using pytest...'
                sh '''
                    source ${VENV_DIR}/bin/activate
                    pytest --junitxml=test-results.xml --html=report.html --self-contained-html
                '''
            }
        }

        stage('Publish Test Report') {
            steps {
                echo 'Publishing test reports...'
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: '.',
                    reportFiles: 'report.html',
                    reportName: 'Pytest Report'
                ])
            }
        }
    }
        stage('Build Docker Image') {
                steps {
                    echo 'Building Docker image...'
                    sh '''
                        docker build -t ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG} .
                    '''
                }
            }

        stage('Push Docker Image to Docker Hub') {
            steps {
                echo 'Logging in and pushing Docker image to Docker Hub...'
                withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}
                        docker logout
                    '''
                }
            }
        }
    }


    post {
        always {
            echo 'Cleaning workspace and archiving test results...'
            junit 'test-results.xml'
            cleanWs()
        }
    }
}
